import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

from dictionary import AdressBook, save_addressbook

# === FSM –°–æ—Å—Ç–æ—è–Ω–∏—è ===
class WalletFlow(StatesGroup):
    WaitForSeed = State()
    WaitForChoice = State()
    WaitForAddress = State()

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏ userID ===
def setup_bot(filename="token.txt"):
    with open(filename, "r") as file:
        lines = file.read().strip().splitlines()
        token = lines[0].strip()
        userID = int(lines[1].strip())

        bot = Bot(token=token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
        dp = Dispatcher(storage=MemoryStorage())
        return bot, dp, userID

bot, dp, userID = setup_bot()
waiting_for_response: dict[int, asyncio.Future] = {}

# === /start ===
@dp.message(Command("start"))
async def handle_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–∏–¥-—Ñ—Ä–∞–∑—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ—à–µ–ª—å–∫—É:")
    await state.set_state(WalletFlow.WaitForSeed)

# === –°–∏–¥-—Ñ—Ä–∞–∑–∞ ===
@dp.message(WalletFlow.WaitForSeed)
async def handle_seed(message: Message, state: FSMContext):
    if message.text.strip() != "word word word":
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å–∏–¥-—Ñ—Ä–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n1. –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤")
    await state.set_state(WalletFlow.WaitForChoice)

# === –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è ===
@dp.message(WalletFlow.WaitForChoice)
async def handle_choice(message: Message, state: FSMContext):
    if message.text.strip() not in ("1", "2"):
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2.")
        return
    await state.update_data(choice=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:")
    await state.set_state(WalletFlow.WaitForAddress)

# === –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è ===
@dp.message(WalletFlow.WaitForAddress)
async def handle_address(message: Message, state: FSMContext):
    address = message.text.strip()
    await state.update_data(address=address)

    if address in AdressBook:
        await message.answer("‚úÖ –ê–¥—Ä–µ—Å —É–∂–µ –≤ –∞–¥—Ä–µ—Å–Ω–æ–π –∫–Ω–∏–≥–µ. –û–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞.")
    else:
        await message.answer("‚ö†Ô∏è –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å. –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ...")
        approved = await request_confirmation()

        if approved:
            AdressBook[address] = {"confirmed": True}
            save_addressbook()
            await message.answer("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω.")
        else:
            await message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
            await state.clear()
            return

    data = await state.get_data()
    choice = data.get("choice")
    await message.answer(f"üéâ –û–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –î–µ–π—Å—Ç–≤–∏–µ: {choice}, –∞–¥—Ä–µ—Å: {address}")
    await state.clear()

# === –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ ===
@dp.callback_query(F.data.in_({"yes", "no"}))
async def handle_response(callback: CallbackQuery):
    is_approved = callback.data == "yes"
    msg_id = callback.message.message_id

    if msg_id in waiting_for_response:
        waiting_for_response[msg_id].set_result(is_approved)
        del waiting_for_response[msg_id]

    await callback.message.edit_text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ." if is_approved else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    await callback.answer("–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω.")

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ===
async def request_confirmation() -> bool:
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="yes")
    keyboard.button(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="no")

    msg = await bot.send_message(
        chat_id=userID,
        text="‚ùó –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é —Å –Ω–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º:",
        reply_markup=keyboard.as_markup()
    )

    future = asyncio.get_running_loop().create_future()
    waiting_for_response[msg.message_id] = future
    return await future

# === –ó–∞–ø—É—Å–∫ ===
async def start_bot():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(start_bot())
