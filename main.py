import os, asyncio
from dictionary import AdressBook, save_addressbook
from bot import request_confirmation, start_bot, bot

clear = lambda: os.system('cls' if os.name == 'nt' else 'clear')

check = '–Ω–∞ –≤—ã—Ä–æ—Å—Ç'


async def tgVerify():
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Telegram...")
    try:
        approved = await request_confirmation()
        return approved
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ Telegram: {e}")
        return False


async def verif(address: str):
    global check

    if address in AdressBook:
        print("‚úÖ –ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω –≤ –∞–¥—Ä–µ—Å–Ω–æ–π –∫–Ω–∏–≥–µ. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
        check = 'verified'
        return

    print("‚ö†Ô∏è –ù–æ–≤—ã–π –∞–¥—Ä–µ—Å. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.")
    approved = await tgVerify()

    if approved:
        check = 'verified'
        AdressBook[address] = {"confirmed": True}
        save_addressbook()
        print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ê–¥—Ä–µ—Å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥—Ä–µ—Å–Ω—É—é –∫–Ω–∏–≥—É.")
    else:
        check = 'denied'
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")


def askSeed():
    seed = ''
    while seed != 'word word word':
        seed = ' '.join(input('–í–≤–µ–¥–∏—Ç–µ —Å–∏–¥-—Ñ—Ä–∞–∑—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ—à–µ–ª–µ–∫: ').split())
        if seed != 'word word word':
            print('–ù–µ–≤–µ—Ä–Ω–∞—è —Å–∏–¥-—Ñ—Ä–∞–∑–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n')
    return seed


def choice():
    choiceVar = input("""–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
      1. –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
      2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
      –í–∞—à –≤—ã–±–æ—Ä: """)

    while choiceVar not in ["1", "2"]:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n")
        return choice()

    return int(choiceVar)


def inputAddress():
    address = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ").strip()
    print(f"–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω: {address}")
    return address


async def main():
    global check

    bot_task = asyncio.create_task(start_bot())
    await asyncio.sleep(1)

    try:
        askSeed()
        user_choice = choice()
        address = inputAddress()

        await verif(address)

        if check != 'verified':
            print("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
            return

        print(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {user_choice}, –∞–¥—Ä–µ—Å: {address}")

    finally:
        bot_task.cancel()
        await bot.session.close()  # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ Telegram-—Å–µ—Å—Å–∏–∏

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")

