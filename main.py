import os
import asyncio
from dictionary import AdressBook
from bot import request_confirmation, start_bot, bot  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞

clear = lambda: os.system('cls' if os.name == 'nt' else 'clear')

check = '–Ω–∞ –≤—ã—Ä–æ—Å—Ç'
smsVerify = None
emailVerify = None
secondWalletVerify = None

# ‚úÖ Telegram-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
async def tgVerify():
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Telegram...")
    try:
        approved = await request_confirmation()
        return approved
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ Telegram: {e}")
        return False

# üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
async def verif():
    global check

    if check in ["verified", "denied"]:
        print(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–∞ —Ä–∞–Ω–µ–µ: {check}")
        return

    print("üì° –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
    approved = await tgVerify()

    if approved:
        check = 'verified'
        print("‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
    else:
        check = 'denied'
        print("‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

# üîë –í–≤–æ–¥ —Å–∏–¥-—Ñ—Ä–∞–∑—ã
def askSeed():
    seed = ''
    while seed != 'word word word':
        seed = ' '.join(input('–í–≤–µ–¥–∏—Ç–µ —Å–∏–¥-—Ñ—Ä–∞–∑—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∫–æ—à–µ–ª–µ–∫: ').split())
        if seed != 'word word word':
            print('–ù–µ–≤–µ—Ä–Ω–∞—è —Å–∏–¥-—Ñ—Ä–∞–∑–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n')
    return seed

# üí∏ –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è
def choice():
    choiceVar = input("""–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
      1. –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤
      2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
      –í–∞—à –≤—ã–±–æ—Ä: """)

    while choiceVar not in ["1", "2"]:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n")
        return choice()
    
    return int(choiceVar)

# üßæ –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞
def inputAddress():
    address = input("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: ").strip()
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ AdressBook
    print(f"–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω: {address}")
    return address

# üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    global check

    bot_task = asyncio.create_task(start_bot())
    await asyncio.sleep(1)

    askSeed()
    user_choice = choice()
    address = inputAddress()

    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ–ª–∞–µ–º check –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º (–≤ –±—É–¥—É—â–µ–º ‚Äî –∞–Ω–∞–ª–∏–∑ –∏–∑ AdressBook)
    check = 'suspicious'

    await verif()

    if check != 'verified':
        print("üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        await bot.session.close()
        return

    print(f"‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞. –í—ã–±—Ä–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {user_choice}, –∞–¥—Ä–µ—Å: {address}")

    bot_task.cancel()
    await bot.session.close()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
